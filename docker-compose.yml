# Docker Compose configuration for RallyCal development and testing
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      # Application settings
      RALLYCAL_ENVIRONMENT: development
      RALLYCAL_DEBUG: "true"
      RALLYCAL_LOG_LEVEL: DEBUG
      RALLYCAL_HOST: 0.0.0.0
      RALLYCAL_PORT: 8000
      
      # Database settings
      DATABASE_URL: postgresql+asyncpg://rallycal:rallycal@db:5432/rallycal
      
      # Security settings
      RALLYCAL_SECRET_KEY: development-secret-key-change-in-production
      
      # Calendar settings
      RALLYCAL_CONFIG_FILE: /app/config/calendars.yaml
      RALLYCAL_CACHE_TTL: 3600
      RALLYCAL_FETCH_TIMEOUT: 30
    
    volumes:
      # Mount configuration directory
      - ./config:/app/config:ro
      # Mount logs directory for persistence
      - app_logs:/app/logs
      # Development: mount source code for hot reload (comment out for production)
      - ./src:/app/src:ro
    
    depends_on:
      db:
        condition: service_healthy
    
    networks:
      - rallycal-network
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database service
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: rallycal
      POSTGRES_USER: rallycal
      POSTGRES_PASSWORD: rallycal
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    
    ports:
      - "5432:5432"
    
    volumes:
      # Persistent database storage
      - db_data:/var/lib/postgresql/data
      # Initialization scripts
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - rallycal-network
    
    restart: unless-stopped
    
    # Health check for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rallycal -d rallycal"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching (optional, for production scaling)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    networks:
      - rallycal-network
    
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - app
    
    networks:
      - rallycal-network
    
    restart: unless-stopped
    
    profiles:
      - production

# Named volumes for data persistence
volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

# Custom network for service communication
networks:
  rallycal-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16